package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.ArrayList;

import javax.sql.DataSource;

public class BillDS implements DataAccessModel<BillBean> {
	
	private DataSource ds;
	private static final String TABLE_NAME = "fatturazione";
	
	public BillDS(DataSource ds) {
		this.ds = ds;
	}
	
	@Override
	public synchronized void doSave(BillBean bill) throws SQLException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		String insertSQL = "INSERT INTO " + BillDS.TABLE_NAME + " (ID_Utente, Nome, Cognome, Email, Via, CAP, City) VALUES (?, ?, ?, ?, ?, ?, ?)";
		
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, bill.getUserID());
			preparedStatement.setString(2, bill.getName());
			preparedStatement.setString(3, bill.getSurname());
			preparedStatement.setString(4, bill.getEmail());
			preparedStatement.setString(5, bill.getAddress());
			preparedStatement.setString(6, bill.getCAP());
			preparedStatement.setString(7, bill.getCity());
			
			
			preparedStatement.execute();
			
			ResultSet tableKeys = preparedStatement.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			
			bill.setUserID(autoGeneratedID);	
			
		} finally {
				try {
					if (preparedStatement != null)
						preparedStatement.close();
					} finally{
						if (connection != null)
							connection.close();
						}
				}
		}
	
	@Override
	public synchronized BillBean doRetrieveByKey(int billID) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
	
		String selectSQL = "SELECT * FROM " + BillDS.TABLE_NAME + " WHERE ID_Fatturazione = ?";
		BillBean bean = null;
		
		
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);
			preparedStatement.setInt(1, billID);

			ResultSet rs = preparedStatement.executeQuery();
			
			if(rs.next()) {
						bean = new BillBean(
						rs.getInt(billID),
						rs.getInt("ID_Utente"),
						rs.getString("Nome"),
						rs.getString("Cognome"),
						rs.getString("Email"),
						rs.getString("Via"),
						rs.getString("City"),
						rs.getString("CAP")
						);	
			}
			
		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return bean;
	}
	
	@Override
	public synchronized boolean doDelete(int code) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		int result = 0;

		String deleteSQL = "DELETE FROM " + BillDS.TABLE_NAME + " WHERE ID_Fatturazione = ?";

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(deleteSQL);
			preparedStatement.setInt(1, code);

			result = preparedStatement.executeUpdate();

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return (result != 0);
	}
	
	
	@Override
	public synchronized Collection<BillBean> doRetrieveAll(String order) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		Collection<BillBean> bills = new ArrayList<BillBean>();

		String selectSQL = "SELECT * FROM " + BillDS.TABLE_NAME;

		if (order != null && !order.equals("")) {
			selectSQL += " ORDER BY " + order;
		}

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);

			ResultSet rs = preparedStatement.executeQuery();

			while (rs.next()) {
						BillBean bean = new BillBean(
						rs.getInt("ID_Fatturazione"),
						rs.getInt("ID_Utente"),
						rs.getString("Nome"),
						rs.getString("Cognome"),
						rs.getString("Email"),
						rs.getString("Via"),
						rs.getString("City"),
						rs.getString("CAP")
						);
					
					bills.add(bean);
			}

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return bills;
	}
	
	@Override
	public synchronized boolean doUpdate(BillBean bill) throws SQLException {

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		String updateSQL = "UPDATE " + BillDS.TABLE_NAME + " (Nome, Cognome, Email, Via, CAP, City) VALUES (?, ?, ?, ?, ?, ?) WHERE ID_Fatturazione = ?";

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(updateSQL);
			preparedStatement.setString(1, bill.getName());
			preparedStatement.setString(2, bill.getSurname());
			preparedStatement.setString(3, bill.getEmail());
			preparedStatement.setString(4, bill.getAddress());
			preparedStatement.setString(5, bill.getCAP());
			preparedStatement.setString(6, bill.getCity());
			//WHERE ID_Fatturazione = ?
			preparedStatement.setInt(7, bill.getBillID());
			
			
			result = preparedStatement.executeUpdate();

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return (result != 0);
	}
	
	
	
	

}
