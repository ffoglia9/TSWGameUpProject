package model;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.LinkedList;

import javax.sql.DataSource;



//DataSource del ReviewDS 
public class ReviewDS implements DataAccessModel<ReviewBean>{
	
	private DataSource ds;
	private static final String TABLE_NAME = "recensione";
	
	public ReviewDS(DataSource ds) {
		this.ds = ds;
		
		//debug
		System.out.println("DataSource ReviewDS creation....");
	}
	
	@Override
	public synchronized void doSave(ReviewBean review) throws SQLException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		String insertSQL = "INSERT INTO " + ReviewDS.TABLE_NAME + " (Consigliato, Opinione) VALUES (?, ?)";
		
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setBoolean(1, review.getLike());
			preparedStatement.setString(2, review.getReview());
			
			preparedStatement.execute();
			
			ResultSet tableKeys = preparedStatement.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			
			
		} finally {
				try {
					if (preparedStatement != null)
						preparedStatement.close();
					} finally{
						if (connection != null)
							connection.close();
						}
				}
		}
	
	
	@Override
	public synchronized ReviewBean doRetrieveByKey(int code) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
	
		String selectSQL = "SELECT * FROM " + ReviewDS.TABLE_NAME + " WHERE ID_Recensione = ?";
		ReviewBean bean = null;
		
		
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);
			preparedStatement.setInt(1, code);

			ResultSet rs = preparedStatement.executeQuery();
			
			if(rs.next()) {
						bean = new ReviewBean(
						rs.getBoolean("Consigliato"),
						rs.getString("Opinione"),
						rs.getInt("ID_Gioco"),
						rs.getInt("ID_Utente"));	
			}
			
		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return bean;
	}
	

	@Override
	public synchronized boolean doDelete(int code) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		int result = 0;

		String deleteSQL = "DELETE FROM " + ReviewDS.TABLE_NAME + " WHERE ID_Recensione = ?";

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(deleteSQL);
			preparedStatement.setInt(1, code);

			result = preparedStatement.executeUpdate();

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return (result != 0);
	}
	
	
	
	
}