package model;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import javax.sql.DataSource;



//DataSource del ReviewDS 
public class TransazioneDS implements DataAccessModel<TransazioneBean>{
	
	private DataSource ds;
	private static final String TABLE_NAME = "transazione";
	
	public TransazioneDS(DataSource ds) {
		this.ds = ds;
		
		//debug
		System.out.println("DataSource ReviewDS creation....");
	}
	
	@Override
	public synchronized void doSave(TransazioneBean transazione) throws SQLException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		String insertSQL = "INSERT INTO " + TransazioneDS.TABLE_NAME + " (ID_Gioco, ID_Utente, ID_Fatturazione, Data) VALUES (?, ?, ?, ?)";
		
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, transazione.getID_gioco());
			preparedStatement.setInt(2, transazione.getID_utente());
			preparedStatement.setInt(3, transazione.getID_fatturazione());
			preparedStatement.setObject(4, transazione.getData());

			preparedStatement.execute();
			
			ResultSet tableKeys = preparedStatement.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			
			transazione.setID_transazione(autoGeneratedID);
			
		} finally {
				try {
					if (preparedStatement != null)
						preparedStatement.close();
					} finally{
						if (connection != null)
							connection.close();
						}
				}
		}
	
	
	@Override
	public synchronized TransazioneBean doRetrieveByKey(int code) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
	
		String selectSQL = "SELECT * FROM " + TransazioneDS.TABLE_NAME + " WHERE ID_Transazione = ?";
		TransazioneBean bean = null;
		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);
			preparedStatement.setInt(1, code);

			ResultSet rs = preparedStatement.executeQuery();
			
			if(rs.next()) {
						bean = new TransazioneBean();
						bean.setID_transazione(code);
						bean.setID_gioco(rs.getInt("ID_Gioco"));
						bean.setID_utente(rs.getInt("ID_Utente"));
						bean.setID_fatturazione(rs.getInt("ID_Fatturazione"));
						bean.setData(rs.getDate("Data").toLocalDate());
			}
			
		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return bean;
	}
	

	@Override
	public synchronized boolean doDelete(int code) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		int result = 0;

		String deleteSQL = "DELETE FROM " + TransazioneDS.TABLE_NAME + " WHERE ID_Transazione = ?";

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(deleteSQL);
			preparedStatement.setInt(1, code);

			result = preparedStatement.executeUpdate();

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return (result != 0);
	}
	
	@Override
	public synchronized Collection<TransazioneBean> doRetrieveAll(String order) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		Collection<TransazioneBean> transazioni = new ArrayList<TransazioneBean>();

		String selectSQL = "SELECT * FROM " + TransazioneDS.TABLE_NAME;

		if (order != null && !order.equals("")) {
			selectSQL += " ORDER BY ?";
		}

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);
			preparedStatement.setString(1, order);

			ResultSet rs = preparedStatement.executeQuery();

			while (rs.next()) {
					TransazioneBean bean = new TransazioneBean();
					bean.setID_transazione(rs.getInt("ID_Transazione"));
					bean.setID_gioco(rs.getInt("ID_Gioco"));
					bean.setID_utente(rs.getInt("ID_Utente"));
					bean.setID_fatturazione(rs.getInt("ID_Fatturazione"));
					bean.setData(rs.getDate("Data").toLocalDate());
					
					transazioni.add(bean);
			}

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return transazioni;
	}
	
	@Override
	public synchronized boolean doUpdate(TransazioneBean transazione) throws SQLException {

		return false; // Le transazioni sono statiche
	}


	public synchronized Collection<TransazioneBean> doRetrieveAllByUserID(int ID_utente) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		Collection<TransazioneBean> transazioni = new ArrayList<TransazioneBean>();

		String selectSQL = "SELECT * FROM " + TransazioneDS.TABLE_NAME + " WHERE ID_Utente = ?";

		try {
			connection = ds.getConnection();
			preparedStatement = connection.prepareStatement(selectSQL);
			preparedStatement.setInt(1, ID_utente);

			ResultSet rs = preparedStatement.executeQuery();

			while (rs.next()) {
					TransazioneBean bean = new TransazioneBean();
					bean.setID_transazione(rs.getInt("ID_Transazione"));
					bean.setID_gioco(rs.getInt("ID_Gioco"));
					bean.setID_utente(ID_utente);
					bean.setID_fatturazione(rs.getInt("ID_Fatturazione"));
					bean.setData(rs.getDate("Data").toLocalDate());
					
					transazioni.add(bean);
			}

		} finally {
			try {
				if (preparedStatement != null)
					preparedStatement.close();
			} finally {
				if (connection != null)
					connection.close();
			}
		}
		return transazioni;
	}
}